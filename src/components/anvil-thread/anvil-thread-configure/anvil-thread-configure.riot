<anvil-thread-configure>
    <div class="flex flex-row">
        <div class="flex flex-col gap-y-4 basis-3/4 pr-1">
            <div if={Boolean(props.controller.getThread())}
                class="text-red-800">
                Cannot edit configuration while running.</div>

            <div>
                <div class="px-1 inline-block border rounded-t-lg bg-gray-200 border-gray-400 border-b-0">
                    Thread name</div>

                <div>
                    <input class="border border-gray-400"
                        readonly={Boolean(props.controller.getThread())}
                        id="threadname" type="text" value={props.controller.getName()}
                        onchange={setName} />
                </div>
            </div>

            <div>
                <div class="px-1 inline-block border rounded-t-lg bg-gray-200 border-gray-400 border-b-0">
                    Thread Template JSON</div>
                <div>
                    <textarea id="threadjson"
                        readonly={Boolean(props.controller.getThread())}
                        onkeydown={ (e) => update({hasChanged: true})}
                        class="min-h-56 w-full border border-gray-400"></textarea>
                </div>

                <div if={!Boolean(props.controller.getThread())}>
                    <button
                        title="Parse JSON to check if it is valid as a Thread Template"
                        onclick={parse}
                        class="px-4 border shadow cursor-pointer rounded bg-gray-300 hover:bg-gray-400">
                        Parse</button>

                    <button
                        title="Save template changes"
                        onclick={save}
                        disabled={!state.hasChanged}
                        class="px-4 border shadow cursor-pointer rounded bg-gray-300 hover:bg-gray-400 disabled:bg-gray-100">
                        Save</button>

                    <button
                        title="Reset template to its original form"
                        onclick={reset}
                        class="px-4 border shadow cursor-pointer rounded bg-gray-300 hover:bg-gray-400">
                        Reset</button>
                </div>

                <div if={!Boolean(props.controller.getThread())}>
                    <span if={state.parse.success}
                        class="text-green-800">
                        {state.parse.success}</span>

                    <span if={state.parse.error}
                        class="text-red-800">
                        {state.parse.error}</span>
                </div>
            </div>

            <div>
                <div class="px-1 inline-block border rounded-t-lg bg-gray-200 border-gray-400 border-b-0">
                    Thread Fetch Params JSON</div>
                <div>
                    <textarea id="paramsjson"
                        onkeydown={ (e) => update({hasParamsChanged: true})}
                        readonly={Boolean(props.controller.getThread())}
                        class="min-h-56 w-full border border-gray-400"></textarea>
                </div>

                <div>
                    <button
                        onclick={parseParams}
                        class="px-4 border shadow cursor-pointer rounded bg-gray-300 hover:bg-gray-400">
                        Parse</button>

                    <button
                        title="Save fetch parameters changes"
                        onclick={saveParams}
                        disabled={!state.hasParamsChanged}
                        class="px-4 border shadow cursor-pointer rounded bg-gray-300 hover:bg-gray-400 disabled:bg-gray-100">
                        Save</button>

                    <button
                        onclick={resetParams}
                        class="px-4 border shadow cursor-pointer rounded bg-gray-300 hover:bg-gray-400">
                        Reset</button>

                    <!--<button if={props.controller.getThread() && !props.controller.getThread().isAutoSyncing()}-->
                        <!--onclick={()=> {props.controller.getThread().addAutoSync(); this.update()}}-->
                        <!--class="px-4 border shadow cursor-pointer rounded bg-gray-300 hover:bg-gray-400">Start Auto Sync</button>-->

                    <!--<button if={props.controller.getThread() && props.controller.getThread().isAutoSyncing()}-->
                        <!--onclick={()=>{props.controller.getThread().removeAutoSync(); this.update()}}-->
                        <!--class="px-4 border shadow cursor-pointer rounded bg-gray-300 hover:bg-gray-400">Stop Auto Sync</button>-->
                </div>

                <div>
                    <span if={state.parseParams.success}
                        class="text-green-800">
                        {state.parseParams.success}</span>

                    <span if={state.parseParams.error}
                        class="text-red-800">
                        {state.parseParams.error}</span>
                </div>
            </div>

        </div>
        <div class="border rounded bg-gray-100 basis-1/4">
            <h1>Docs</h1>
            Bla bla blablablablabla blabla bla
        </div>
    </div>

    <script>
        import {AnvilThreadConfigure} from "./AnvilThreadConfigure";

        return new AnvilThreadConfigure();
    </script>
</anvil-thread-configure>
